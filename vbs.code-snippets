{
		    //VBSCRIPT - Snippets For Visual Studio Code 
			// TODO
			//  FormatCurrency,FormatDateTime,FormatNumber,FormatPercent,GetLocale,GetObject
			//  Weekday,WeekdayName
			// Excel etc??
		    "Abs": {"scope": "vbscript","prefix": "/Abs", "body": ["Abs(${1:number})"],"description": "Return Absolute"},
		    "AppActivate.": {"scope": "vbscript","prefix": "/AppActivate.", "body": ["${1:objShellName}.AppActivate ${2:strApplicationTitle}\n$0"],"description": "AppActivate"},
		    "Array": {"scope": "vbscript","prefix": "/Array", "body": ["Array(${1:value1,value2….})"],"description": "Add values to an Array variable"},
		    "Arguments": {"scope": "vbscript","prefix": "Arguments", "body": ["Set ${1:objArgs} = Wscript.Arguments"],"description": "Get Cmd Line Args into Object [Object has .item(x) .count and .length ]"},
		    "Asc": {"scope": "vbscript","prefix": "/Asc", "body": ["Asc(\"${1:character}\")"],"description": "Return ASCII Number of 1st Character"},
		    "AscW": {"scope": "vbscript","prefix": "/AscW", "body": ["AscW(\"${1:character}\")"],"description": "Return UNICODE Number of Character"},
		    "Atn": {"scope": "vbscript","prefix": "/Atn", "body": ["Atn(${1:number})"],"description": "Return Arctan"}, 
			"CBool": {"scope": "vbscript","prefix": "/CBool", "body": ["CBool(\"${1:bool as string}\")"],"description": "Convert String etc to Boolean"},
			"CByte": {"scope": "vbscript","prefix": "/CByte", "body": ["CByte(\"${1:byte as string}\")"],"description": "Convert String etc to Byte"},
			"CCur": {"scope": "vbscript","prefix": "/CCur", "body": ["CCur(\"${1:currency as string}\")"],"description": "Convert String etc to Currency"},
		    "Cdate": {"scope": "vbscript","prefix": "/Cdate", "body": ["Cdate(\"${1:date as string}\")"],"description": "Convert String etc to Date"},
		    "Cdbl": {"scope": "vbscript","prefix": "/Cdbl", "body": ["Cdbl(${1:value or expression})"],"description": "Convert value or expression to double \"100\" 100*10 NOT \"100*10\""},
		    "Chr": {"scope": "vbscript","prefix": "/Chr", "body": ["Chr(${1:value0-255})"],"description": "Returns Ascii eg. 65 returns A"},
		    "ChrW": {"scope": "vbscript","prefix": "/ChrW", "body": ["ChrW(${1:value})"],"description": "Returns UNICODE eg. 65 returns A"},
			"CInt": {"scope": "vbscript","prefix": "/CInt", "body": ["CInt(\"${1:int as string}\")"],"description": "Convert String etc to Integer"},		 
			"CLng": {"scope": "vbscript","prefix": "/CLng", "body": ["CLng(\"${1:Long as string}\")"],"description": "Convert String etc to Long"},		 
		    "Cos": {"scope": "vbscript","prefix": "/Cos", "body": ["Cos(${1:number})"],"description": "Return Cosine"},
		    "CSng": {"scope": "vbscript","prefix": "/CSng", "body": ["CSng(\"${1:Single as string}\")"],"description": "Convert String etc to Single"},		 		  
		    "CStr": {"scope": "vbscript","prefix": "/CStr", "body": ["CStr(\"${1:Value}\")"],"description": "Convert Value to String"},		 		  
			"Date": {"scope": "vbscript","prefix": "/Date", "body": ["Date"],"description": "Returns Current Date"},
		    "DateAdd": {"scope": "vbscript","prefix": "/DateAdd", "body": ["DateAdd (\"${1|yyyy,q,m,y,d,w,h,n,s|}\",${2:increment number},${3:DateToAddTo})"],"description": "Returns Amended Date"},
		    "DateDiff": {"scope": "vbscript","prefix": "/DateDiff", "body": ["DateDiff(\"${1|yyyy,q,m,y,d,w,h,n,s|}\",${2:date1},${3:Date2},${4|vbSunday,vbMonday,vbTuesday,vbWednesday,vbThursday,vbFriday,vbSaturday|},${5|vbUseSystem,vbFirstJan1,vbFirstFourDays,vbFirstFullWeek|})"],"description": "Returns Date Differences For Interval"},
			"DatePart": {"scope": "vbscript","prefix": "/DatePart", "body": ["DateDiff(\"${1|yyyy,q,m,y,d,w,h,n,s|}\",${2:date},${3|vbSunday,vbMonday,vbTuesday,vbWednesday,vbThursday,vbFriday,vbSaturday|},${4|vbUseSystem,vbFirstJan1,vbFirstFourDays,vbFirstFullWeek|})"],"description": "Returns Part of a given Date"},
			"DateSerial": {"scope": "vbscript","prefix": "/DateSerial", "body": ["DateSerial (${1:YearNo}, ${2:MonthNo}, ${3:DayNo})"],"description": "Returns Date From Y M D as separate numbers"},
			"DateValue": {"scope": "vbscript","prefix": "/DateValue", "body": ["DateValue(\"${1:date as string}\")"],"description": "Convert String etc to Date"},
			"Day": {"scope": "vbscript","prefix": "/Day", "body": ["Day(${1:Date})"],"description": "Returns Day From Date"},
		    "Dim": {"scope": "vbscript","prefix": "/Dim", "body": ["Dim ${1:var or array}"],"description": "Dim Array"},
			"DoWhile": {"scope": "vbscript","prefix": "/DoWhile", "body": ["Do While ${1:Condition}\n\t${2:'Statements}\n'Exit Do\nLoop$0"],"description": "Do While Also Use [(Do Until) (Loop)],[(Do) (Loop Until)],[(Do) (Loop While)]"},
		    "Escape": {"scope": "vbscript","prefix": "/Escape", "body": ["Escape(${1:string})"],"description": "Remove Unicode Allowed If Ok For URL"},
		    "Excel": {"scope": "vbscript","prefix": "/ExcelMake", "body": ["Set ${1:obj} = CreateObject(\"Excel.Application\")"],"description": "Create Excel Object"}, 
			"Exit": {"scope": "vbscript","prefix": "/Exit", "body": ["Exit ${1|Do,For,Function,Property,Sub|}"],"description": "Exit Do,For,Function,Property or Sub"},
			"Exp": {"scope": "vbscript","prefix": "/Exp", "body": ["Exp(${1:number})"],"description": "Return e to the power of n"}, 
			"Eval": {"scope": "vbscript","prefix": "/Eval", "body": ["Eval(${1:stringToEval})"],"description": "VB Syntax to be evaluated"}, 
			"FileSystemObject": {"scope": "vbscript","prefix": "/FileSystemObject", "body": ["Set ${1:FSO} = CreateObject(\"Scripting.FileSystemObject\")\n$0"],"description": "Create Scripting.FileSystemObject"},
		    "FileSystemObject.": {"scope": "vbscript","prefix": "/FileSystemObject.", "body": ["${1:FilesystemObject}${2|.BuildPath(strPath\\,strFileName),.CopyFile(Source\\, Dest [\\,Overwrite (True/False)]),.CopyFolder(Source\\, Dest [\\,Overwrite (True/False)]),.CreateFolder(Path),.CreateTextFile(FileName [\\,Overwrite (True/False) [\\, Unicode (True/False)]]),.DeleteFile(FileSpec\\, Force (True/False)),.DeleteFolder(FileSpec\\, Force (True/False)),.DriveExists(strDrive),.FileExists(strFile),.FolderExists(strFolder),.GetAbsolutePathName(strPath),.GetBaseName(strPath),.GetDrive(strDrive),.GetDriveName(strDrive),.GetExtensionName(strPath),.GetFile(strPath),.GetFileName(strPath),.GetFolder(strPath),.GetParentFolderName(strPath),.GetSpecialFolderName(FolderType),.GetStandardStream(Type [\\,Unicode (True/False)]),.GetTempName(),.MoveFile(Source\\, Dest),.MoveFolder(Source\\, Dest),.OpenTextFile(strFile \\,IOMode 8=append 1=Read 2=Write \\,Create True/False \\,Format 0=Ascii -1=Unicode -2=default)|}"],"description": "FileSystemObject. Options"},
	        "Filter": {"scope": "vbscript","prefix": "/Filter", "body": ["Filter (${1:SourceArray}, ${2:FilterString} ,${3|True,False|} ,${4|vbBinaryCompare,vbTextCompare|})"],"description": "Filter Array into New Array,True Filter Match OR False Non Filter Matches"}, 
		    "Fix": {"scope": "vbscript","prefix": "/Fix", "body": ["Fix(${1:numberOrVar})"],"description": "Return Integer Part of Number"},
		    "ForNext": {"scope": "vbscript","prefix": "/ForNext", "body": ["For ${1:counter} = ${2:initial_value} To ${3:Max_value} ${4:[Optional Step stepCounter]}\n\t${5:[Statements]}\n\t'Exit For\nNext"],"description": "For Next Loop"},		  
		    "ForEach": {"scope": "vbscript","prefix": "/ForEach", "body": ["For Each ${1:element} in ${2:group}\n\t${3:[Statements]}\n\t'Exit For\nNext"],"description": "For Each Next Loop"},		  		
		    "Function": {"scope": "vbscript","prefix": "/Function", "body": ["Function ${1:name} () \n\nEnd Function"],"description": "Function"},
			"Hex": {"scope": "vbscript","prefix": "/Hex", "body": ["Hex(${1:Number})"],"description": "Convert No To Hex"},
			"Hour": {"scope": "vbscript","prefix": "/Hour", "body": ["Hour(${1:Time})"],"description": "Returns Hour of Time"},
			"IE": {"scope": "vbscript","prefix": "/IEMake", "body": ["Set ${1:obj} = CreateObject(\"InternetExplorer.Application\")"],"description": "Create IE Object"}, 
			"If": {"scope": "vbscript","prefix": "/If", "body": ["If ${1:value1} = ${2:value1} Then\n\t${3:[Statements]}\n'ElseIf ${4:condition} Then\n\t'${5:[Statements]}\nEnd If"],"description": "If Statement"},		  		
			"InputBox": {"scope": "vbscript","prefix": "/InputBox", "body": ["InputBox(${1:Prompt},${2:Title},${3:Default},${4:xpos},${5:ypos},${6:helpfile},${7:context})"],"description": "Input Box"},
			"InStr": {"scope": "vbscript","prefix": "/InStr", "body": ["InStr(${1:StringToLookIn},${2:StringToSearchFor})"],"description": "Find string"},
			"InStrRev": {"scope": "vbscript","prefix": "/InStrRev", "body": ["InStr(${1:StringToLookIn},${2:StringToSearchFor})"],"description": "Find string Look In Reverse Order"},
			"IsArray": {"scope": "vbscript","prefix": "/IsArray", "body": ["IsArray(${1:VariableName})"],"description": "Check For Array"},
			"IsDate": {"scope": "vbscript","prefix": "/IsDate", "body": ["IsDate(${1:VariableName})"],"description": "Check For Date"},
			"IsEmpty": {"scope": "vbscript","prefix": "/IsEmpty", "body": ["IsEmpty(${1:VariableName})"],"description": "Check For Empty"},
			"IsNull": {"scope": "vbscript","prefix": "/IsNull", "body": ["IsNull(${1:VariableName})"],"description": "Check For Null"},
			"IsNumeric": {"scope": "vbscript","prefix": "/IsNumeric", "body": ["IsNumeric(${1:VariableName})"],"description": "Check For Numeric"},
			"IsObject": {"scope": "vbscript","prefix": "/IsObject", "body": ["IsObject(${1:VariableName})"],"description": "Check For Object"},
			"Join": {"scope": "vbscript","prefix": "/Join", "body": ["Join(${1:OneDimArray},${2:OPT Delimiter Else \" \"})"],"description": "Check For Object"},
			"LBound": {"scope": "vbscript","prefix": "/LBound", "body": ["LBound(${1:ArrayName},${2:ArrayDimension})"],"description": "Get Lowest Array Counter For Given Dimension"},
			"Lcase": {"scope": "vbscript","prefix": "/Lcase", "body": ["Lcase(${1:string})"],"description": "Convert to lowercase"},
			"Left": {"scope": "vbscript","prefix": "/Left", "body": ["Left(${1:String},${2:NoOfCharacters})"],"description": "Leftmost Substring"},
			"Len": {"scope": "vbscript","prefix": "/Len", "body": ["Len(${1:string})"],"description": "Length of a String"},
			"Log": {"scope": "vbscript","prefix": "/Log", "body": ["Log(${1:number})"],"description": "Log Of A Number"},
			"LTrim": {"scope": "vbscript","prefix": "/LTrim", "body": ["LTrim(${1:string})"],"description": "Remove Leading Spaces"},
			"Mid": {"scope": "vbscript","prefix": "/Mid", "body": ["Mid(${1:String},${2:StartNoCharacter},${3:LengthNoCharacters})"],"description": "Substring"},
			"Minute": {"scope": "vbscript","prefix": "/Minute", "body": ["Minute(${1:Time})"],"description": "Returns Minute of Time"},
			"MsgBox": {"scope": "vbscript","prefix": "/MsgBox", "body": ["${1:VarX} = MsgBox(\"${2:MessageText}\",${3|vbOKOnly,vbOKCancel,vbAbortRetryIgnore,vbYesNoCancel,vbYesNo,vbRetryCancel|},\"${4:title}\")\n$0"],"description": "Message Box  NB Remove () if No Return Value Required"},
			"Month": {"scope": "vbscript","prefix": "/Month", "body": ["Month(${1:date})"],"description": "Return Month From Date"},
			"Now": {"scope": "vbscript","prefix": "/Now", "body": ["Now"],"description": "Current Time and Date"},
			"Oct": {"scope": "vbscript","prefix": "/Oct", "body": ["Oct(${1:Number})"],"description": "Convert No To Oct"},
			"Outlook": {"scope": "vbscript","prefix": "/OutlookMake", "body": ["Set ${1:obj} = CreateObject(\"Outlook.Application\")"],"description": "Create Outlook Object"}, 		
		    "Private": {"scope": "vbscript","prefix": "/Private", "body": ["Private ${1:stringVariable}"],"description": "Private Variable Declaration"},
		    "Public": {"scope": "vbscript","prefix": "/Public", "body": ["Public ${1:string}"],"description": "Public Variable Declaration"},
			"ReDim": {"scope": "vbscript","prefix": "/ReDim", "body": ["ReDim ${1:Opt Preserve} ${2:ArrayName}(${3:NewArrayDim})"],"description": "ReDim Array"},
			"Rem": {"scope": "vbscript","prefix": "/Rem", "body": ["Rem"],"description": "Comment"},
			"Replace": {"scope": "vbscript","prefix": "/Replace", "body": ["Replace(${1:MainString},${2:StringToFindinMain},${2:NewStringForMain})"],"description": "Find and Replace String"},
			"RGB": {"scope": "vbscript","prefix": "/RGB", "body": ["RGB(${1:red},${2:green},${2:blue})"],"description": "RGB As single number"},
			"Right": {"scope": "vbscript","prefix": "/Right", "body": ["Right(${1:String},${2:NoOfCharacters})"],"description": "Rightmost Substring"},
			"Rnd": {"scope": "vbscript","prefix": "/Rnd", "body": ["Rnd()"],"description": "Random Number enter seed in brackets if required"},
			"Round": {"scope": "vbscript","prefix": "/Round", "body": ["Round(${1:Value},${2:NoOfDecimalPlaces})"],"description": "Round a Number"},
			"RTrim": {"scope": "vbscript","prefix": "/RTrim", "body": ["RTrim(${1:string})"],"description": "Remove Trailing Spaces"},
			"Second": {"scope": "vbscript","prefix": "/Second", "body": ["Second(${1:Time})"],"description": "Returns Second of Time"},
			"Shell" : {"scope": "vbscript","prefix": "/shell","body": "Set ${1:ShellName} = CreateObject(\"Shell.Application\")\n","description": "Create Shell.Application"},
		    "Sin": {"scope": "vbscript","prefix": "/Sin", "body": ["Sin(${1:number})"],"description": "Return Sine"}, 
		    "Sleep": {"scope": "vbscript","prefix": "/Sleep", "body": ["Wscript.Sleep(${1:1000=1sec})"],"description": "Sleep MilliSecs"},
			"Sgn": {"scope": "vbscript","prefix": "/Sgn", "body": ["Sgn(${1:number})"],"description": "Returns the sign of a number"},
			"Space": {"scope": "vbscript","prefix": "/Space", "body": ["Space(${1:number})"],"description": "Returns n Spaces"},
		    "Split": {"scope": "vbscript","prefix": "/Split", "body": ["Split(${1:String},${2:Delimiter})"],"description": "Split Into Array on Delimiter"},
			"Sqr": {"scope": "vbscript","prefix": "/Sqr", "body": ["Sqr(${1:number})"],"description": "Return Square Root"},
			"String": {"scope": "vbscript","prefix": "/String", "body": ["String(${1:Number},${2:Character})"],"description": "Returns a string of 1 character n times"},
			"StrComp": {"scope": "vbscript","prefix": "/StrComp", "body": ["StrComp(${1:String},${2:String})"],"description": "Returns 0 if Same else -1 or 1 if 1>2 2>1 etc"},
			"StrReverse": {"scope": "vbscript","prefix": "/StrReverse", "body": ["StrReverse(${1:string})"],"description": "Return Reversed String"},
			"Sub": {"scope": "vbscript","prefix": "/Sub", "body": ["Sub ${1:name} () \n\nEnd Sub"],"description": "Sub"},
			"Tan": {"scope": "vbscript","prefix": "/Tan", "body": ["Tan(${1:number})"],"description": "Return Tangent"}, 
			"Time": {"scope": "vbscript","prefix": "/Time", "body": ["Time"],"description": "Current Time"},
			"Timer": {"scope": "vbscript","prefix": "/Timer", "body": ["Timer"],"description": "Seconds Since Midnight"},
			"TimeSerial": {"scope": "vbscript","prefix": "/TimeSerial", "body": ["TimeSerial(${1:Hours},${2:Minutes},${3:Seconds})"],"description": "Time Based on input H M S"},					  
			"TimeValue": {"scope": "vbscript","prefix": "/TimeValue", "body": ["TimeValue(${1:timeAsString})"],"description": "Time Based on input string"},					  
			"Trim": {"scope": "vbscript","prefix": "/Trim", "body": ["Trim(${1:string})"],"description": "Remove Trailing Spaces"},
			"TypeName": {"scope": "vbscript","prefix": "/TypeName", "body": ["TypeName(${1:VarName})"],"description": "Return Variant SubType of a Variable"},
			"UBound": {"scope": "vbscript","prefix": "/UBound", "body": ["UBound(${1:ArrayName},${2:ArrayDimension})"],"description": "Get Highest Array Counter For Given Dimension"},
			"Ucase": {"scope": "vbscript","prefix": "/Ucase", "body": ["Ucase(${1:string})"],"description": "Convert to UPPERCASE"},
			"UnEscape": {"scope": "vbscript","prefix": "/UnEscape", "body": ["UnEscape(${1:string})"],"description": "Return Unicode to Escaped String"},
			"Word": {"scope": "vbscript","prefix": "/WordMake", "body": ["Set ${1:obj} = CreateObject(\"Word.Application\")"],"description": "Create Word Object"}, 
			"Wscript.Echo": {"scope": "vbscript","prefix": "/Wscript.Echo", "body": ["Wscript.Echo(\"${1:Text or Var[NB remove \"\"]} \")"],"description": "Write to Command Line"},
		    "Wscript.Interactive": {"scope": "vbscript","prefix": "/Wscript.Interactive", "body": ["Wscript.Interactive = ${1|true,false|}"],"description": "Set Interaction"},
		    "VarType": {"scope": "vbscript","prefix": "/VarType", "body": ["VarType(${1:VarName})"],"description": "Return Type of a Variable"},
		    "Year": {"scope": "vbscript","prefix": "/Year", "body": ["Year(${1:date})"],"description": "Return Year From Date"}
			
}
